name: Java Backend CI/CD with Gradle

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  # 빌드 및 테스트 Job
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: polling
          MYSQL_USER: polling
          MYSQL_PASSWORD: polling
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2

      - name: JDK 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Wrapper에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: Gradle 빌드
        run: ./gradlew build --scan # --scan 옵션 추가

      - name: 테스트 실행 (테스트 DB 사용)
        env:
           SPRING_PROFILES_ACTIVE: test
           SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/polling?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true
           SPRING_DATASOURCE_USERNAME: polling
           SPRING_DATASOURCE_PASSWORD: polling
        run: ./gradlew test --scan # --scan 옵션 추가

      - name: 빌드 결과 확인
        run: ls -la build/libs/

  # 배포 Job
  deploy:
    needs: build # build job이 성공해야 deploy가 실행됨
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main' # main 브랜치에만 배포

    steps:
      - name: 리포지토리 체크아웃
        uses: actions/checkout@v2

      - name: AWS 인증하기
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         
########################################################
          
      # - name: 기존 JAR 파일 삭제 (서버에서)
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.LIGHTSAIL_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
      #     script: | # 실행 중인 애플리케이션 프로세스가 있는지 확인하고, 있으면 종료 -> 기존 JAR 파일 삭제
      #       if pgrep -f "java -jar /home/ubuntu/polling-backend/polling-0.0.1-SNAPSHOT.jar"; then 
      #         echo "애플리케이션 프로세스를 종료합니다."
      #         pkill -f 'java -jar /home/ubuntu/polling-backend/*.jar'
      #       else
      #         echo "실행 중인 애플리케이션 프로세스가 없습니다."
      #       fi
      #       rm -rf /home/ubuntu/polling-backend/*.jar

      #     debug: true
########################################################
      - name: JAR 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: 'build/libs/*.jar' # build/libs/*.jar 진행 시 오류 발생하여 명확한 파일명 명시
          target: '/home/ubuntu/polling-backend/'
          overwrite: true # 파일 덮어쓰기 허용
          debug: true # 디버그 모드 활성화
          timeout: 60s # 타임아웃 시간 증가

      - name: 서버에서 애플리케이션 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ubuntu
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: 
          #  export SPRING_DATASOURCE_URL="${{ secrets.PROD_SPRING_DATASOURCE_URL }}"
          #  export SPRING_DATASOURCE_USERNAME="${{ secrets.PROD_SPRING_DATASOURCE_USERNAME }}"
          #  export SPRING_DATASOURCE_PASSWORD="${{ secrets.PROD_SPRING_DATASOURCE_PASSWORD }}"
           screen -dmS app java -jar /home/ubuntu/polling-backend/build/libs/polling-0.0.1-SNAPSHOT.jar
          debug: true
          timeout: 1500s
          command_timeout: 1500s
